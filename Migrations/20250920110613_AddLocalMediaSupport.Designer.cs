// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoodPlaylistGenerator.Data;

#nullable disable

namespace MoodPlaylistGenerator.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250920110613_AddLocalMediaSupport")]
    partial class AddLocalMediaSupport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("MoodPlaylistGenerator.Models.Mood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Moods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#FFD700",
                            Description = "Upbeat and energetic songs",
                            Name = "Happy"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#4169E1",
                            Description = "Melancholic and emotional songs",
                            Name = "Sad"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#98FB98",
                            Description = "Calm and soothing songs",
                            Name = "Relaxed"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#FF6347",
                            Description = "High-energy and motivating songs",
                            Name = "Energetic"
                        },
                        new
                        {
                            Id = 5,
                            Color = "#FF69B4",
                            Description = "Love songs and romantic ballads",
                            Name = "Romantic"
                        },
                        new
                        {
                            Id = 6,
                            Color = "#9370DB",
                            Description = "Music for concentration and work",
                            Name = "Focus"
                        });
                });

            modelBuilder.Entity("MoodPlaylistGenerator.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("MoodId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MoodId");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("MoodPlaylistGenerator.Models.PlaylistSong", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SongId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlaylistId", "SongId");

                    b.HasIndex("SongId");

                    b.ToTable("PlaylistSongs");
                });

            modelBuilder.Entity("MoodPlaylistGenerator.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalFileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalFilePath")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LocalFileSizeBytes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocalFileType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("YouTubeUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("MoodPlaylistGenerator.Models.SongMood", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MoodId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SongId", "MoodId");

                    b.HasIndex("MoodId");

                    b.ToTable("SongMoods");
                });

            modelBuilder.Entity("MoodPlaylistGenerator.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResetToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ResetTokenExpiry")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MoodPlaylistGenerator.Models.Playlist", b =>
                {
                    b.HasOne("MoodPlaylistGenerator.Models.Mood", "Mood")
                        .WithMany("Playlists")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoodPlaylistGenerator.Models.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mood");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoodPlaylistGenerator.Models.PlaylistSong", b =>
                {
                    b.HasOne("MoodPlaylistGenerator.Models.Playlist", "Playlist")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoodPlaylistGenerator.Models.Song", "Song")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("MoodPlaylistGenerator.Models.Song", b =>
                {
                    b.HasOne("MoodPlaylistGenerator.Models.User", "User")
                        .WithMany("Songs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoodPlaylistGenerator.Models.SongMood", b =>
                {
                    b.HasOne("MoodPlaylistGenerator.Models.Mood", "Mood")
                        .WithMany("SongMoods")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoodPlaylistGenerator.Models.Song", "Song")
                        .WithMany("SongMoods")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mood");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("MoodPlaylistGenerator.Models.Mood", b =>
                {
                    b.Navigation("Playlists");

                    b.Navigation("SongMoods");
                });

            modelBuilder.Entity("MoodPlaylistGenerator.Models.Playlist", b =>
                {
                    b.Navigation("PlaylistSongs");
                });

            modelBuilder.Entity("MoodPlaylistGenerator.Models.Song", b =>
                {
                    b.Navigation("PlaylistSongs");

                    b.Navigation("SongMoods");
                });

            modelBuilder.Entity("MoodPlaylistGenerator.Models.User", b =>
                {
                    b.Navigation("Playlists");

                    b.Navigation("Songs");
                });
#pragma warning restore 612, 618
        }
    }
}
