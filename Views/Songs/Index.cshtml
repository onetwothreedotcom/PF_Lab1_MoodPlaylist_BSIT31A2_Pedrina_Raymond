@model MoodPlaylistGenerator.ViewModels.SongListViewModel
@{
    ViewData["Title"] = "My Songs";
    
    string ExtractYouTubeVideoId(string url)
    {
        try
        {
            var uri = new Uri(url);
            
            if (uri.Host.Contains("youtu.be"))
            {
                return uri.AbsolutePath.TrimStart('/');
            }
            
            if (uri.Host.Contains("youtube.com"))
            {
                var queryString = uri.Query.TrimStart('?');
                var queryParams = queryString.Split('&')
                    .Select(param => param.Split('='))
                    .Where(pair => pair.Length == 2)
                    .ToDictionary(pair => pair[0], pair => Uri.UnescapeDataString(pair[1]));
                
                return queryParams.TryGetValue("v", out var videoId) ? videoId : "";
            }
            
            return "";
        }
        catch
        {
            return "";
        }
    }
}

<!-- Page Header -->
<div class="page-header text-center">
    <div class="container">
        <h1 class="page-title fade-in">
            <i class="fas fa-music me-3"></i>My Music Library
        </h1>
        <p class="page-subtitle slide-up">Discover and manage your favorite tracks</p>
        <div class="mt-4 slide-up">
            <a href="@Url.Action("Create")" class="btn btn-light btn-lg">
                <i class="fas fa-plus me-2"></i>Add New Song
            </a>
        </div>
    </div>
</div>

<div class="container">

    <!-- Search and Filter -->
    <div class="card mb-5 fade-in">
        <div class="card-header">
            <h5 class="mb-0">
                <i class="fas fa-search me-2"></i>Find Your Music
            </h5>
        </div>
        <div class="card-body">
            <form method="get" class="row g-3">
                <div class="col-md-6">
                    <label for="search" class="form-label fw-semibold">Search Songs</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input type="text" class="form-control" id="search" name="search" 
                               value="@Model.SearchTerm" placeholder="Search by title or artist...">
                    </div>
                </div>
                <div class="col-md-4">
                    <label for="moodId" class="form-label fw-semibold">Filter by Mood</label>
                    <select class="form-select" id="moodId" name="moodId">
                        <option value="">All Moods</option>
                        @foreach (var mood in Model.Moods)
                        {
                            <option value="@mood.Id" selected="@(Model.SelectedMoodId == mood.Id)" 
                                    style="color: @mood.Color;">@mood.Name</option>
                        }
                    </select>
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <div class="btn-group w-100">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-filter me-1"></i>Filter
                        </button>
                        <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                            <i class="fas fa-times"></i>
                        </a>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Songs List -->
    @if (Model.Songs.Any())
    {
        <div class="row g-4 slide-up">
            @foreach (var song in Model.Songs)
            {
                <div class="col-lg-6 col-xl-4">
                    <div class="card h-100 song-card" data-song-id="@song.Id">
                        @{
                            var youtubeVideoId = ExtractYouTubeVideoId(song.YouTubeUrl);
                        }
                        
                        <!-- YouTube Video Thumbnail/Player -->
                        @if (!string.IsNullOrEmpty(youtubeVideoId))
                        {
                            <div class="card-img-top position-relative overflow-hidden" style="height: 200px; background: #000;">
                                <div class="youtube-thumbnail" data-video-id="@youtubeVideoId" onclick="playVideo(this)">
                                    <img src="https://img.youtube.com/vi/@youtubeVideoId/hqdefault.jpg" 
                                         class="w-100 h-100" style="object-fit: cover; cursor: pointer;" 
                                         alt="@song.Title thumbnail">
                                    <div class="play-overlay position-absolute top-50 start-50 translate-middle">
                                        <div class="play-button">
                                            <i class="fab fa-youtube fa-3x text-white"></i>
                                        </div>
                                    </div>
                                </div>
                                <div class="video-player d-none" data-video-id="@youtubeVideoId"></div>
                            </div>
                        }
                        else
                        {
                            <div class="card-img-top d-flex align-items-center justify-content-center" style="height: 200px; background: linear-gradient(135deg, #667eea, #764ba2);">
                                <i class="fas fa-music fa-3x text-white opacity-50"></i>
                            </div>
                        }
                        
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <div class="flex-grow-1">
                                    <h5 class="card-title mb-1 fw-bold">@song.Title</h5>
                                    <p class="card-text text-muted mb-0">by @song.Artist</p>
                                </div>
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-outline-primary dropdown-toggle" type="button" 
                                            data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end">
                                        <li>
                                            <a class="dropdown-item" href="@Url.Action("Details", new { id = song.Id })">
                                                <i class="fas fa-eye me-2"></i>View Details
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item" href="@Url.Action("Edit", new { id = song.Id })">
                                                <i class="fas fa-edit me-2"></i>Edit Song
                                            </a>
                                        </li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li>
                                            <form method="post" action="@Url.Action("Delete", new { id = song.Id })" 
                                                  style="display: inline;" 
                                                  onsubmit="return confirm('Are you sure you want to delete this song?');">
                                                <button type="submit" class="dropdown-item text-danger">
                                                    <i class="fas fa-trash me-2"></i>Delete Song
                                                </button>
                                            </form>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                @foreach (var songMood in song.SongMoods)
                                {
                                    <span class="mood-badge" style="background-color: @songMood.Mood.Color;">
                                        @songMood.Mood.Name
                                    </span>
                                }
                            </div>
                            
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">
                                    <i class="fas fa-calendar-alt me-1"></i>
                                    @song.CreatedAt.ToString("MMM dd, yyyy")
                                </small>
                                <a href="@song.YouTubeUrl" target="_blank" class="btn btn-sm btn-outline-danger">
                                    <i class="fab fa-youtube me-1"></i>Watch
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Songs Count -->
        <div class="mt-5 text-center fade-in">
            <div class="stats-card d-inline-block">
                <div class="stats-number">@Model.Songs.Count</div>
                <div class="stats-label">Songs Found</div>
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-5 fade-in">
            <div class="mb-4">
                <div class="rounded-circle mx-auto d-flex align-items-center justify-content-center" 
                     style="width: 120px; height: 120px; background: linear-gradient(135deg, #667eea, #764ba2); color: white;">
                    <i class="fas fa-music fa-3x"></i>
                </div>
            </div>
            <h3 class="mb-3">No songs found</h3>
            @if (!string.IsNullOrEmpty(Model.SearchTerm) || Model.SelectedMoodId.HasValue)
            {
                <p class="text-muted mb-4">Try adjusting your search or filter criteria to find what you're looking for.</p>
                <div class="d-flex gap-2 justify-content-center">
                    <a href="@Url.Action("Index")" class="btn btn-outline-primary">
                        <i class="fas fa-times me-2"></i>Clear Filters
                    </a>
                    <a href="@Url.Action("Create")" class="btn btn-primary">
                        <i class="fas fa-plus me-2"></i>Add New Song
                    </a>
                </div>
            }
            else
            {
                <p class="text-muted mb-4">Start building your music library by adding your first song and tagging it with moods!</p>
                <a href="@Url.Action("Create")" class="btn btn-primary btn-lg">
                    <i class="fas fa-plus me-2"></i>Add Your First Song
                </a>
            }
        </div>
    }
</div>

@section Scripts {
<style>
    .play-overlay {
        background: rgba(0, 0, 0, 0.7);
        border-radius: 50%;
        width: 80px;
        height: 80px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        opacity: 0.9;
    }
    
    .play-overlay:hover {
        background: rgba(0, 0, 0, 0.9);
        transform: scale(1.1);
        opacity: 1;
    }
    
    .youtube-thumbnail {
        position: relative;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .youtube-thumbnail:hover img {
        transform: scale(1.05);
    }
    
    .video-player iframe {
        width: 100%;
        height: 200px;
        border: none;
    }
    
    .song-card {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .song-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
    }
</style>

<script>
    function playVideo(thumbnail) {
        const videoId = thumbnail.getAttribute('data-video-id');
        const videoPlayer = thumbnail.parentNode.querySelector('.video-player');
        
        // Create iframe
        const iframe = document.createElement('iframe');
        iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&rel=0`;
        iframe.allow = 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture';
        iframe.allowFullscreen = true;
        iframe.style.width = '100%';
        iframe.style.height = '200px';
        iframe.style.border = 'none';
        
        // Hide thumbnail and show video player
        thumbnail.classList.add('d-none');
        videoPlayer.classList.remove('d-none');
        videoPlayer.appendChild(iframe);
        
        // Add close button
        const closeBtn = document.createElement('button');
        closeBtn.innerHTML = '<i class="fas fa-times"></i>';
        closeBtn.className = 'btn btn-sm btn-danger position-absolute';
        closeBtn.style.top = '5px';
        closeBtn.style.right = '5px';
        closeBtn.style.zIndex = '1000';
        closeBtn.onclick = function() {
            stopVideo(thumbnail, videoPlayer);
        };
        
        videoPlayer.style.position = 'relative';
        videoPlayer.appendChild(closeBtn);
    }
    
    function stopVideo(thumbnail, videoPlayer) {
        // Clear video player content
        videoPlayer.innerHTML = '';
        
        // Show thumbnail and hide video player
        thumbnail.classList.remove('d-none');
        videoPlayer.classList.add('d-none');
    }
    
    // Auto-pause other videos when one starts playing
    document.addEventListener('DOMContentLoaded', function() {
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'childList') {
                    mutation.addedNodes.forEach(function(node) {
                        if (node.tagName === 'IFRAME' && node.src.includes('youtube.com')) {
                            // Pause other videos
                            document.querySelectorAll('.video-player iframe').forEach(function(otherIframe) {
                                if (otherIframe !== node) {
                                    const videoPlayer = otherIframe.parentNode;
                                    const thumbnail = videoPlayer.parentNode.querySelector('.youtube-thumbnail');
                                    stopVideo(thumbnail, videoPlayer);
                                }
                            });
                        }
                    });
                }
            });
        });
        
        document.querySelectorAll('.video-player').forEach(function(player) {
            observer.observe(player, { childList: true });
        });
    });
</script>
}
